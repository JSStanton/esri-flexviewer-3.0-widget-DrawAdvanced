<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%"
		 minWidth="50"
		 minHeight="50"
		 xmlns:supportClasses="com.esri.ags.skins.supportClasses.*"
		 xmlns:components="widgets.SENZ_DrawAdvanced.com.nzgc.viewer.components.*"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.SimpleMarkerSymbol;
			import com.esri.ags.symbols.Symbol;
			import com.esri.ags.symbols.TextSymbol;
			import widgets.SENZ_DrawAdvanced.com.nzgc.viewer.utils.SymbolUtil;
			
			import mx.core.IVisualElement;
			import mx.events.CloseEvent;
			import mx.events.ColorPickerEvent;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var _symbol:Symbol;
			
			[Bindable]
			private var _newSymbol:Symbol;
			
			private var _symbolUpdated:Boolean = false;
			

			/* --------------------------------------------------------------------
			Component proeprties
			-------------------------------------------------------------------- */

			/**
			 * ESRI Symbol to use as a model/starting point.
			 */
			public function set symbol(value:Symbol):void
			{
				_symbol = value;
				
				if (value)
				{
					_newSymbol = SymbolUtil.DuplicateSymbol(value);
				}
				
				updateCurrentState();
			}
			
			public function get symbol():Symbol
			{
				return _symbol;
			}
			
			/**
			 * ESRI Symbol generated by the component based on the current settings.
			 */
			public function get NewSymbol():Symbol
			{
				return _newSymbol;
			}
			
			
			/* --------------------------------------------------------------------
			Component UI functions
			-------------------------------------------------------------------- */
			
			private function updateCurrentState():void
			{
				if (_newSymbol is TextSymbol)
				{
					var ts:TextSymbol = _newSymbol as TextSymbol;
					
					alphaSlider.value = ts.alpha;
					pkrColour.selectedColor = ts.color;
					
					var fp:Object = {};
					if (ts.textFormat)
					{
						fp.fontFamily = ts.textFormat.font || "Arial";
						fp.fontWeight = ts.textFormat.bold ? "bold" : "normal";
						fp.fontStyle = ts.textFormat.italic ? "italic" : "normal";
						fp.fontSize = ts.textFormat.size || 14;
						fp.textDecoration = ts.textFormat.underline ? "underline" : "none";
					}
					else
					{
						fp.fontFamily = "Arial";
						fp.fontWeight = "normal";
						fp.fontStyle = "normal";
						fp.fontSize = 14;
						fp.textDecoration = "none";
					}
					
					fontPicker.fontProps = fp;
					
					currentState = "TextSymbol";
				}
				
				if (_newSymbol is SimpleFillSymbol)
				{
					// Update the control settings
					var sfs:SimpleFillSymbol = _newSymbol as SimpleFillSymbol;
					
					alphaSlider.value = sfs.alpha;
					pkrColour.selectedColor = sfs.color;
					fillDropDownList.selectedIndex = getStyleIndex(fillDropDownList.dataProvider as ArrayCollection,sfs.style);
					
					if (sfs.outline)
					{
						outlineAlphaSlider.value = sfs.outline.alpha;
						pkrOutlineColour.selectedColor = sfs.outline.color;
						outlineSizeStepper.value = sfs.outline.width;
						outlineDropDownList.selectedIndex = getStyleIndex(outlineDropDownList.dataProvider as ArrayCollection,sfs.outline.style);
					}
					else
					{
						outlineAlphaSlider.value = 1;
						pkrOutlineColour.selectedColor = sfs.color;
						outlineSizeStepper.value = 1;
						outlineDropDownList.selectedIndex = 0;
					}
					
					// Update the component state
					currentState = "SimpleFillSymbol";
				}
				
				if (_newSymbol is SimpleLineSymbol)
				{
					// Update the control settings
					var sls:SimpleLineSymbol = _newSymbol as SimpleLineSymbol;
					
					alphaSlider.value = sls.alpha;
					pkrColour.selectedColor = sls.color;
					lineDropDownList.selectedIndex = getStyleIndex(lineDropDownList.dataProvider as ArrayCollection,sls.style);
					lineSizeStepper.width = sls.width;
					
					// Update the component state
					currentState = "SimpleLineSymbol";
				}
				
				if (_newSymbol is SimpleMarkerSymbol)
				{
					// Update the control settings
					var sms:SimpleMarkerSymbol = _newSymbol as SimpleMarkerSymbol;
					
					markerSizeStepper.value = sms.size;
					alphaSlider.value = sms.alpha;
					pkrColour.selectedColor = sms.color;
					markerDropDownList.selectedIndex = getStyleIndex(markerDropDownList.dataProvider as ArrayCollection,sms.style);
					
					if (sms.outline)
					{
						outlineAlphaSlider.value = sms.outline.alpha;
						pkrOutlineColour.selectedColor = sms.outline.color;
						outlineSizeStepper.value = sms.outline.width;
						outlineDropDownList.selectedIndex = getStyleIndex(outlineDropDownList.dataProvider as ArrayCollection,sms.outline.style);
					}
					else
					{
						outlineAlphaSlider.value = 1;
						pkrOutlineColour.selectedColor = sms.color;
						outlineSizeStepper.value = 1;
						outlineDropDownList.selectedIndex = 0;
					}
					
					// Update the component state
					currentState = "SimpleMarkerSymbol";
				}
				
				updatePreview();
			}
			
			// Called when the selected colour on one of the colour pickers is updated
			protected function colourPicker_changeHandler(event:ColorPickerEvent):void
			{
				updatePreview();
			}
			
			// Called when the selected item in one of the dropdown lists is updated
			protected function dropDownList_changeHandler(event:IndexChangeEvent):void
			{
				updatePreview();
			}
			
			// Called when the value on one of the sliders or steppers is updated
			protected function control_changeHandler(event:Event):void
			{
				updatePreview();
			}

			// Called when the fontpicker properties change
			protected function fontPicker_fontSettingUpdateHandler(event:FlexEvent):void
			{
				updatePreview();
			}

			// Updates the swatch preview 
			private function updatePreview():void
			{
				previewGroup.removeAllElements();

				try
				{
					if (_newSymbol)
					{
						if (_newSymbol is SimpleMarkerSymbol)
						{
							var sms:SimpleMarkerSymbol = _newSymbol as SimpleMarkerSymbol;
							sms.alpha = alphaSlider.value;
							sms.size = markerSizeStepper.value;
							sms.color = pkrColour.selectedColor;
							sms.style = markerDropDownList.selectedItem.value;
							sms.xoffset = markerXOffsetStepper.value;
							sms.yoffset = markerYOffsetStepper.value;
							sms.angle = markerRotationStepper.value;
							
							if (outlineSizeStepper.value > 0)
							{
								sms.outline = new SimpleLineSymbol(outlineDropDownList.selectedItem.value,pkrOutlineColour.selectedColor,
									outlineAlphaSlider.value,outlineSizeStepper.value);
							}
							else
							{
								sms.outline = null;
							}
						}
						
						if (_newSymbol is SimpleLineSymbol)
						{
							var sls:SimpleLineSymbol = _newSymbol as SimpleLineSymbol;
							sls.alpha = alphaSlider.value;
							sls.width = lineSizeStepper.value;
							sls.color = pkrColour.selectedColor;
							sls.style = lineDropDownList.selectedItem.value;
						}
						
						if (_newSymbol is SimpleFillSymbol)
						{
							var sfs:SimpleFillSymbol = _newSymbol as SimpleFillSymbol;
							sfs.alpha = alphaSlider.value;
							sfs.color = pkrColour.selectedColor;
							sfs.style = fillDropDownList.selectedItem.value;
							
							if (outlineSizeStepper.value > 0)
							{
								sfs.outline = new SimpleLineSymbol(outlineDropDownList.selectedItem.value,pkrOutlineColour.selectedColor,
									outlineAlphaSlider.value,outlineSizeStepper.value);
							}
							else
							{
								sfs.outline = null;
							}
						}
						
						if (_newSymbol is TextSymbol)
						{
							// Get the font properties
							var fp:Object = fontPicker.fontProps;
							if (fp)
							{
								var txt:TextSymbol = _newSymbol as TextSymbol;
								
								txt.alpha = alphaSlider.value;
								txt.text = "Text";
								txt.color = pkrColour.selectedColor;
								txt.angle = markerRotationStepper.value;
								txt.xoffset = markerXOffsetStepper.value;
								txt.yoffset = markerYOffsetStepper.value;
								
								var txtFormat:TextFormat = new TextFormat(fp.fontFamily,fp.fontSize,pkrColour.value as uint);
								txtFormat.bold = fp.fontWeight == "bold";
								txtFormat.italic = fp.fontStyle == "italic";
								txtFormat.underline = fp.textDecoration == "underline";
								txt.textFormat = txtFormat;

								// Update the preview for the label
								var lab:Label = new Label();
								lab.text = "Text";
								lab.alpha = alphaSlider.value;
								lab.rotation = markerRotationStepper.value;
								lab.x = (previewGroup.width/2) - (lab.width/2) + markerXOffsetStepper.value;
								lab.y = (previewGroup.height/2) - (lab.height/2) + markerYOffsetStepper.value;
								
								lab.setStyle("fontFamily",fp.fontFamily);
								lab.setStyle("fontSize",fp.fontSize);
								lab.setStyle("fontStyle",fp.fontStyle);
								lab.setStyle("fontWeight",fp.fontWeight);
								lab.setStyle("textDecoration",fp.textDecoration);
								lab.setStyle("color",pkrColour.selectedColor);
								
								previewGroup.addElement(lab);
							}
						}
						else
						{
							var swatch:IVisualElement = IVisualElement(Symbol(_newSymbol).createSwatch(60, 40));
							previewGroup.addElement(swatch);
						}
					}
				}
				catch (error:Error)
				{
					// Do nothing
				}
			}
			
			/**
			 * Function to get the item index of the given style name from a style dropdown dataprovider.  
			 */			
			private function getStyleIndex(array:ArrayCollection, style:String):int
			{
				var index:int = -1;
				for (var i:int = 0; i < array.length; i++)
				{
					if (array.getItemAt(i).value == style)
					{
						index = i;
						break;
					}
				}
				return index;
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="SimpleMarkerSymbol" />
		<s:State name="SimpleLineSymbol" />
		<s:State name="SimpleFillSymbol" />
		<s:State name="TextSymbol" />
	</s:states>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:VGroup id="symbolSettings" width="100%"  height="100%" gap="5">
		
		<s:VGroup id="mainSymbol" width="100%" gap="5" paddingTop="5" >
			
			<s:Label id="labSettings" text="Symbol:" styleName="WidgetTitle" />
			
			<s:HGroup gap="5" verticalAlign="middle" height="25" width="100%" >
				<s:Label text="Type:" />
				
				<s:DropDownList id="markerDropDownList" toolTip="Click to change the marker type" width="100%"
								labelField="label" change="dropDownList_changeHandler(event)" selectedIndex="0"
								visible="false" visible.SimpleMarkerSymbol="true" 
								includeInLayout="false" includeInLayout.SimpleMarkerSymbol="true" >
					<mx:ArrayCollection>
						<fx:Object label="Circle Marker" value="circle" />
						<fx:Object label="Cross Marker" value="cross" />
						<fx:Object label="Diamond Marker" value="diamond" />
						<fx:Object label="Square Marker" value="square" />
						<fx:Object label="Triangle Marker" value="triangle" />
						<fx:Object label="X Marker" value="x" />
					</mx:ArrayCollection>
				</s:DropDownList>
				
				<s:DropDownList id="lineDropDownList" toolTip="Click to change the line type" width="100%"
								labelField="label" change="dropDownList_changeHandler(event)" selectedIndex="0"
								visible="false" visible.SimpleLineSymbol="true" 
								includeInLayout="false" includeInLayout.SimpleLineSymbol="true">
					<mx:ArrayCollection>
						<fx:Object label="Solid Line" value="solid" />
						<fx:Object label="Dash Line" value="dash" />
						<fx:Object label="Dash Dot Line" value="dashdot" />
						<fx:Object label="Dash Dot Dot Line" value="dashdotdot" />
						<fx:Object label="Dot Line" value="dot" />
					</mx:ArrayCollection>
				</s:DropDownList>
				
				<s:DropDownList id="fillDropDownList" toolTip="Click to change the fill type" width="100%"
								labelField="label" change="dropDownList_changeHandler(event)" selectedIndex="0"
								visible="false" visible.SimpleFillSymbol="true" 
								includeInLayout="false" includeInLayout.SimpleFillSymbol="true">
					<mx:ArrayCollection>
						<fx:Object label="Solid" value="solid" />
						<fx:Object label="Cross" value="cross" />
						<fx:Object label="Diagonal Cross" value="diagonalcross" />
						<fx:Object label="Horizontal Lines" value="horizontal" />
						<fx:Object label="Vertical Lines" value="vertical" />
						<fx:Object label="Backward Diagonal Lines" value="backwarddiagonal" />
						<fx:Object label="Forward Diagonal Lines" value="forwarddiagonal" />
					</mx:ArrayCollection>
				</s:DropDownList>
				
				<s:Label text="Colour:" />
				<mx:ColorPicker id="pkrColour" toolTip="Click to change symbol colour." 
								change="colourPicker_changeHandler(event)"/>
				
				<s:Label text="Size:" visible="false" 
						 visible.SimpleMarkerSymbol="true" includeInLayout="false" 
						 includeInLayout.SimpleMarkerSymbol="true" />
				<s:NumericStepper id="markerSizeStepper" minimum="5" maximum="30" 
								  change="control_changeHandler(event)" stepSize="1" 
								  visible="false" visible.SimpleMarkerSymbol="true" 
								  includeInLayout="false" includeInLayout.SimpleMarkerSymbol="true"/>
				
				<s:Label text="Width:" visible="false" 
						 visible.SimpleLineSymbol="true" includeInLayout="false" 
						 includeInLayout.SimpleLineSymbol="true"/>
				<s:NumericStepper id="lineSizeStepper" minimum="1" maximum="10" 
								  change="control_changeHandler(event)" stepSize="1" 
								  visible="false" visible.SimpleLineSymbol="true" 
								  includeInLayout="false" includeInLayout.SimpleLineSymbol="true" />
			</s:HGroup>
			
			<components:FontPicker id="fontPicker" width="100%" visible="false" visible.TextSymbol="true" 
								   includeInLayout="false" includeInLayout.TextSymbol="true" showPreview="false" 
								   fontSettingUpdate="fontPicker_fontSettingUpdateHandler(event)"/>
			
			<s:HGroup gap="5" verticalAlign="middle" height="25" width="100%" >
				<s:Label text="Transparency:" />
				<s:HSlider id="alphaSlider" minimum="0" maximum="1" width="100%" useHandCursor="true" 
						   change="control_changeHandler(event)" stepSize="0.1" />
			</s:HGroup>
			
			<s:HGroup gap="5" verticalAlign="middle" height="25" width="100%" 
					  visible="false" visible.SimpleMarkerSymbol="true" visible.TextSymbol="true"
					  includeInLayout="false" includeInLayout.SimpleMarkerSymbol="true" 
					  includeInLayout.TextSymbol="true" >
				
				<s:Label text="X Offset:" />
				<s:NumericStepper id="markerXOffsetStepper" minimum="-50" maximum="50" stepSize="1" 
								  toolTip="Use to change to horizontal offset of the symbol." 
								  change="control_changeHandler(event)" />
				
				<s:Label text="Y Offset:" />
				<s:NumericStepper id="markerYOffsetStepper" minimum="-50" maximum="50" stepSize="1" 
								  toolTip="Use to change to vertical offset of the symbol." 
								  change="control_changeHandler(event)" />
				
				<s:Label text="Rotation:" />
				<s:NumericStepper id="markerRotationStepper" minimum="0" maximum="359" stepSize="1" 
								  toolTip="Use to change to rotation of the symbol." 
								  change="control_changeHandler(event)" />
			</s:HGroup>
			
		</s:VGroup>
		
		<s:VGroup id="outlineArea" width="100%" gap="5" visible="false" 
				  visible.SimpleFillSymbol="true" visible.SimpleMarkerSymbol="true" 
				  includeInLayout="false" includeInLayout.SimpleFillSymbol="true" 
				  includeInLayout.SimpleMarkerSymbol="true" >
			
			<s:Label id="labOutlineSettings" text="Outline:" styleName="WidgetTitle" />
			
			<s:HGroup gap="5" verticalAlign="middle" height="25" width="100%">
				<s:Label text="Type:" />
				<s:DropDownList id="outlineDropDownList" toolTip="Click to change the line type" width="100%"
								labelField="label" change="dropDownList_changeHandler(event)" selectedIndex="0">
					<mx:ArrayCollection>
						<fx:Object label="Solid Line" value="solid" />
						<fx:Object label="Dash Line" value="dash" />
						<fx:Object label="Dash Dot Line" value="dashdot" />
						<fx:Object label="Dash Dot Dot Line" value="dashdotdot" />
						<fx:Object label="Dot Line" value="dot" />
						<fx:Object label="No Outline" value="none" />
					</mx:ArrayCollection>
				</s:DropDownList>
				
				<s:Label text="Colour:" />
				<mx:ColorPicker id="pkrOutlineColour" toolTip="Click to change symbol outline colour." 
								change="colourPicker_changeHandler(event)"/>
				
				<s:Label text="Width:" />
				<s:NumericStepper id="outlineSizeStepper" minimum="0" maximum="10" 
								  change="control_changeHandler(event)" stepSize="1" />
				
			</s:HGroup>
			
			<s:HGroup gap="5" verticalAlign="middle" height="25" width="100%">
				<s:Label text="Transparency:" />
				<s:HSlider id="outlineAlphaSlider" minimum="0" maximum="1" width="100%" useHandCursor="true" 
						   change="control_changeHandler(event)" stepSize="0.1" />
			</s:HGroup>
			
		</s:VGroup>
		
		<s:HGroup id="previewGroup" width="100%" height="50" horizontalAlign="center" 
				  verticalAlign="middle" paddingTop="5" paddingBottom="5">
		</s:HGroup>
		
	</s:VGroup>
	
</s:Group>